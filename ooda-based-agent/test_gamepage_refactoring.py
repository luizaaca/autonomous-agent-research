"""
Testa a refatora√ß√£o da GamePage para usar a classe Character (Etapa 6).
"""
import sys
sys.path.append('.')

from character import Character
from page import GamePage
from pages import PAGES

def test_gamepage_refactoring():
    print("=== TESTE REFATORA√á√ÉO GAMEPAGE - ETAPA 6 ===\n")
    
    print("1. TESTE CRIA√á√ÉO DA GAMEPAGE COM CHARACTER")
    print("-" * 50)
    
    # Criar personagem usando classe Character
    character = Character()
    character.setup("Detective Smith", "Police Officer", 35, "Experienced detective")
    
    # Configurar alguns recursos e habilidades para teste
    character.set_skill("Firearms", 65, "combat")
    character.set_skill("Mysticism", 45, "expert")
    character.add_item("Police Badge", "equipment")
    character.add_item("Service Pistol", "weapons")
    
    # Criar GamePage com Character
    game_page = GamePage(character, PAGES)
    game_page.set_current_page(1)
    
    print(f"‚úÖ GamePage criada com Character: {character.name}")
    print(f"‚úÖ P√°gina atual definida: {game_page.current_page_id}")
    print()
    
    print("2. TESTE RENDERIZA√á√ÉO DO STATUS DO PERSONAGEM")
    print("-" * 50)
    
    # Testar render do status usando m√©todos da Character
    status = game_page.render_character_status()
    print("Status renderizado:")
    print(status[:200] + "..." if len(status) > 200 else status)
    print()
    
    print("3. TESTE APLICA√á√ÉO DE EFEITOS")
    print("-" * 50)
    
    # Testar aplica√ß√£o de efeitos usando m√©todo da Character
    effects = [
        {"action": "take_damage", "amount": 2},
        {"action": "spend_luck", "amount": 5},
        {"action": "gain_skill", "skill": "Occult"}
    ]
    
    result = game_page.update_character_from_effects(effects)
    print(f"Efeitos aplicados: {result['effects_processed']}")
    print(f"Sucessos: {result['effects_applied']}")
    print(f"Falhas: {result['effects_failed']}")
    print()
    
    # Verificar se os efeitos foram aplicados
    health = character.get_health_status()
    luck = character.get_luck()
    
    print(f"Status de sa√∫de ap√≥s dano: {health['current_level']}")
    print(f"Luck atual ap√≥s gasto: {luck['current']}")
    
    try:
        occult_skill = character.get_skill("Occult", "common")
        print(f"Skill Occult adicionada: {occult_skill['full']}%")
    except KeyError:
        print("Skill Occult n√£o foi adicionada")
    print()
    
    print("4. TESTE GERA√á√ÉO DE PROMPT COMPLETO")
    print("-" * 50)
    
    # Testar gera√ß√£o do prompt completo
    prompt = game_page.generate_prompt()
    
    # Verificar se cont√©m as se√ß√µes principais
    sections_check = {
        "AGENT COCKPIT": "üéØ AGENT COCKPIT" in prompt,
        "CHARACTER INFO": "üìã CHARACTER INFO" in prompt,
        "HEALTH STATUS": "‚ù§Ô∏è  HEALTH STATUS" in prompt,
        "RESOURCES": "‚ö° RESOURCES" in prompt,
        "CHARACTERISTICS": "üìä CHARACTERISTICS" in prompt,
        "KEY SKILLS": "üéØ KEY SKILLS" in prompt,
        "INVENTORY": "üéí INVENTORY" in prompt,
        "CURRENT SITUATION": "üìç CURRENT SITUATION" in prompt,
        "CHOICES": "üéÆ AVAILABLE CHOICES" in prompt
    }
    
    print("Se√ß√µes do prompt verificadas:")
    for section, found in sections_check.items():
        status = "‚úÖ" if found else "‚ùå"
        print(f"  {status} {section}")
    
    all_sections = all(sections_check.values())
    print(f"\nTodas as se√ß√µes encontradas: {'‚úÖ' if all_sections else '‚ùå'}")
    print()
    
    print("5. TESTE COMPATIBILIDADE COM P√ÅGINAS")
    print("-" * 50)
    
    # Testar diferentes p√°ginas
    test_pages = [1, 2, 3]
    
    for page_id in test_pages:
        if page_id in PAGES:
            game_page.set_current_page(page_id)
            choices_summary = game_page.get_choice_summary()
            
            print(f"P√°gina {page_id}:")
            print(f"  Choices: {len(game_page.current_page_data.get('choices', []))}")
            print(f"  Summary: {choices_summary[:50]}..." if len(choices_summary) > 50 else f"  Summary: {choices_summary}")
        else:
            print(f"P√°gina {page_id}: N√£o encontrada")
    print()
    
    print("6. TESTE COMPARA√á√ÉO COM SISTEMA ANTIGO")
    print("-" * 50)
    
    # Verificar se as informa√ß√µes s√£o equivalentes
    info_checks = {
        "Nome": character.name == "Detective Smith",
        "Ocupa√ß√£o": character.occupation == "Police Officer",
        "Idade": character.age == 35,
        "Vivo": character.is_alive(),
        "Tem invent√°rio": len(character.get_inventory()["equipment"]) > 0
    }
    
    print("Verifica√ß√µes de compatibilidade:")
    for check, result in info_checks.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check}")
    
    all_compatible = all(info_checks.values())
    print(f"\nCompatibilidade total: {'‚úÖ' if all_compatible else '‚ùå'}")
    print()
    
    print("7. TESTE FUNCIONALIDADES AVAN√áADAS")
    print("-" * 50)
    
    # Testar modificadores
    character.add_modifier("Fighting", "penalty_dice", 2)
    character.add_modifier("Firearms", "bonus_dice", 1)
    
    # Re-renderizar status com modificadores
    status_with_mods = game_page.render_character_status()
    has_modifiers = "ACTIVE MODIFIERS" in status_with_mods
    
    print(f"Modificadores no status: {'‚úÖ' if has_modifiers else '‚ùå'}")
    
    # Testar hist√≥rico
    game_page.add_to_history(1, "Test page text", {"text": "Test choice", "goto": 2})
    history = game_page.render_history()
    has_history = "DECISION HISTORY" in history
    
    print(f"Hist√≥rico funcionando: {'‚úÖ' if has_history else '‚ùå'}")
    print()
    
    print("‚úÖ Todos os testes de refatora√ß√£o executados!")
    print("\n=== BENEF√çCIOS DA REFATORA√á√ÉO ===")
    print("‚úÖ Elimina√ß√£o de duplica√ß√£o de c√≥digo")
    print("‚úÖ Uso dos m√©todos robustos da classe Character")
    print("‚úÖ Aplica√ß√£o de efeitos simplificada (1 linha vs 20+ linhas)")
    print("‚úÖ Melhor tratamento de erros via Character")
    print("‚úÖ Interface mais limpa e mant√≠vel")
    print("‚úÖ Compatibilidade total mantida")
    print("‚úÖ Funcionalidades avan√ßadas (modificadores, valida√ß√£o)")

if __name__ == "__main__":
    test_gamepage_refactoring()
